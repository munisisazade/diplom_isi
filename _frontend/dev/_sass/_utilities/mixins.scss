// Mixins
///*
//** General Custom Mixins
//*/
///* Animations and keyframes
//-------------------------------------*/
@mixin animation-simple($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}


//gradient
@mixin linear-gradient($from, $to) {
  background: $to;
	background: -moz-linear-gradient(top, $from 0%, $to 100%);
	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$from), color-stop(100%,$to));
	background: -webkit-linear-gradient(top, $from 0%,$to 100%);
	background: -o-linear-gradient(top, $from 0%,$to 100%);
	background: linear-gradient(to bottom, $from 0%,$to 100%);
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, startColorstr=#{$from}, endColorstr=#{$to})
}

@mixin radial-gradient($from, $to) {
	background: -moz-radial-gradient(center, circle cover, $from 0%, $to 100%);
	background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $from), color-stop(100%, $to));
	background: -webkit-radial-gradient(center, circle cover, $from 0%, $to 100%);
	background: -o-radial-gradient(center, circle cover, $from 0%, $to 100%);
	background: -ms-radial-gradient(center, circle cover, $from 0%, $to 100%);
	background: radial-gradient(center, circle cover, $from 0%, $to 100%);
	background-color: $from;
}





///* Retina mixin by Jason Zimdars
//-------------------------------------*/
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

///* Absolute and Fixed Positioned
//-------------------------------------*/
@mixin abs-pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
  @if $top != auto {
    top: $top;
  }
  @if $right != auto {
    right: $right;
  }
  @if $bottom != auto {
    bottom: $bottom;
  }
  @if $left != auto {
    left: $left;
  }
  position: absolute;
}

@mixin fix-pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
  @if $top != auto {
    top: $top;
  }
  @if $right != auto {
    right: $right;
  }
  @if $bottom != auto {
    bottom: $bottom;
  }
  @if $left != auto {
    left: $left;
  }
  position: fixed;
}

///* Transform
//-------------------------------------*/
@mixin transform($transform...) {
  -webkit-transform: $transform;
  -ms-transform: $transform; // IE9 only
  -o-transform: $transform;
  transform: $transform;
}

@mixin backface-visibility($visibility...) {
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility: $visibility;
  -ms-backface-visibility: $visibility;
  backface-visibility: $visibility;
}

///* Responsive Breakpoints
//-------------------------------------*/
@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);
  @if $type == string {
    @if $min == visible-xs {
      //  SCREEN < 767px
      @media (max-width: $screen-xs-max) {
        @content;
      }
    } @else if $min == visible-sm {
      // 768px < SCREEN > 991px
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
        @content;
      }
    } @else if $min == visible-md {
      // 992px < SCREEN > 1199px
      @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
        @content;
      }
    } @else if $min == visible-lg {
      //  SCREEN > 1200px
      @media (min-width: $screen-lg-min) {
        @content;
      }
    }
      // additional rules
    @else if $min == visible-from-xs {
      //  SCREEN > 767px
      @media (min-width: $screen-xs-max) {
        @content;
      }
    } @else if $min == visible-from-sm {
      //  SCREEN > 768px
      @media (min-width: $screen-sm-min) {
        @content;
      }
    } @else if $min == visible-from-md {
      //  SCREEN > 991px
      @media (min-width: $screen-md-min) {
        @content;
      }
    } @else if $min == visible-till-md {
      //  SCREEN < 991px
      @media (max-width: $screen-md-min) {
        @content;
      }
    }
  }
    // if number
  @else if $type == number {
    $query: "all" !default;
    @if $min != 0 and $max != 0 {
      $query: "(min-width: #{$min}) and (max-width: #{$max})";
    } @else if $min != 0 and $max == 0 {
      $query: "(min-width: #{$min})";
    } @else if $min == 0 and $max != 0 {
      $query: "(max-width: #{$max})";
    }
    @media #{$query} {
      @content;
    }
  }
}

///* Margin mixin
//-------------------------------------*/
@mixin marg-topNbottom($arg) {
  margin-top: $arg;
  margin-bottom: $arg;
}

@mixin marg-leftNright($arg) {
  margin-left: $arg;
  margin-right: $arg;
}

///* Padding mixin
//-------------------------------------*/
@mixin padd-topNbottom($arg) {
  padding-top: $arg;
  padding-bottom: $arg;
}

@mixin padd-leftNright($arg) {
  padding-left: $arg;
  padding-right: $arg;
}

///* Border mixin
//-------------------------------------*/
@mixin border-topNbottom($arg...) {
  border-top: $arg;
  border-bottom: $arg;
}

@mixin border-leftNright($arg) {
  border-left: $arg;
  border-right: $arg;
}

///* Image sprite function
//-------------------------------------*/
@mixin img-sprite($url) {
  background: url("#{$url}") no-repeat 0 0;
  @extend %imgsprite;
}

///* Style releted referrer points
//-------------------------------------*/

%reset {
  margin: 0;
  padding: 0;
}

%imgsprite {
  display: inline-block;
  overflow: hidden;
  text-indent: -999em;
}

///* Alignment mixins
//-------------------------------------*/
@mixin vertical-center() {
  @include abs-pos(50%, auto, auto, auto);
  @include transform(translateY(-50%));
}

@mixin horizontal-center() {
  @include abs-pos(auto, auto, auto, 50%);
  @include transform(translateX(-50%));
}

@mixin align-center($size) {
  @include abs-pos(50%, auto, auto, 50%);
  @include square($size);
  margin-top: -($size/2);
  margin-left: -($size/2);
}

///*
//** Project Mixins
//*/
// Triangle helper mixin (by Yair Even-Or)
// @param {Direction} $direction - either `top`, `right`, `bottom` or `left`
// @param {Color} $color [currentcolor] - Triangle color
// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
  $size: $size/2;
  $transparent: rgba($color, 0);
  $opposite: (top:bottom, right:left, left:right, bottom:top);
  content: '';
  display: inline-block;
  width: 0;
  height: 0;
  border: $size solid $transparent;
  border-#{map-get($opposite, $direction)}-color: $color;
  margin-#{$direction}: -$size/2;
}
